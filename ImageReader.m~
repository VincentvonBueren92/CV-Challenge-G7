% classdef ImageReader
%     % Add class description here
%     % Documentation on defining classes in Matlab: https://de.mathworks.com/help/matlab/matlab_oop/create-a-simple-class.html
%     % Example on defining the constructer: https://de.mathworks.com/help/matlab/matlab_oop/class-constructor-methods.html#:~:text=A%20constructor%20method%20is%20a,an%20instance%20of%20the%20class.&text=All%20MATLAB%C2%AE%20classes%20have,that%20overrides%20the%20default%20constructor.
%     % 
% 
%     % Add properties
%     properties
%         % mustBeMember user guide:
%         % https://de.mathworks.com/help/matlab/ref/mustbemember.html (option as parser)
%         src = ''; % Path of the sequence
%         L = 1; % number of the left camera 
%         R  = 2; % number of the right camera
%         start = 0; % start point of the frames lecture
%         N = 1; % How many frames to load using next method
%     end
%   
%     methods 
%         % Add the class constructor
%         function obj = ImageReader(src, L, R, varargin)
%           
%           % Set default values
%           defaultSource = '/Users/amna.najib/Documents/amna/CV/data/P1E_S1';
%           defaultLeft = 1;
%           defaultRight = 2;
%           defaultStart = 0;
%           defaultN = 1;
%           
%           % Add valid values 
%           validSource = @(x) exist(src, 'dir') == 7;
%           validLeft = @(x) isnumeric(x) && (ismember(x, [1, 2]));
%           validRight = @(x) isnumeric(x) && (ismember(x, [2, 3]));
%           validStart = @(x) isnumeric(x) && (x>=0);
%           validN = @(x) isnumeric(x) && (x>=1);
%           
%           % Parser
%           p = inputParser;
%           addRequired(p, 'source', validSource);
%           addRequired(p, 'left', validLeft);
%           addRequired(p, 'right', validRight);
%           addOptional(p, 'start', defaultStart, validStart);
%           addOptional(p, 'N', defaultN, validN);
%           
%           parse(p, src, L, R, varargin{:});
%           
%           % Assign the variables
%           obj.src = p.Results.source;
%           obj.L = p.Results.left;
%           obj.R = p.Results.right;
%           obj.start = p.Results.start;
%           obj.N = p.Results.N;
%       end
%         
%         % Set the method next
%         function loop = next(this)
% 
%             % Define the variable loop
% 
%             % Set loop variable l 
%             persistent l; 
%             % Set iterator variable it
%             persistent it; 
% 
%             % Init l
%             if isempty(l)
%                 l = 0;
%             end
% 
%             % Init it
%             if isempty(it)
%                 it = this.start + 1;
%             end
% 
%             % Get folder name
%             list_path = split(this.src, filesep) ;
%             folder = char(list_path(end));
% 
%             % Set the cam1 & cam2 folders
%             cam1_folder = [folder, '_C', num2str(this.L)]; 
%             cam2_folder = [folder, '_C', num2str(this.R)];
% 
%             % Set the paths to left(cam1) and right(cam2) img sequences
%             cam1_path = fullfile(this.src, cam1_folder);       
%             cam2_path = fullfile(this.src, cam2_folder);
% 
%             % Reference for Reading imgs and getting the sequence of imgs:
%             % https://de.mathworks.com/matlabcentral/answers/24461-reading-sequence-of-jpeg-images-from-current-directory
%             left_imgs = dir(fullfile(cam1_path , '/*.jpg'));       
%             right_imgs = dir(fullfile(cam2_path , '/*.jpg'));
% 
%             % Set the number of images in the folder
%             num_imgs = length(left_imgs)
% 
%             % Init left & right
%             left = [];
%             right = [];
% 
%             % Set the beginning "it_start" and end of the loop "it_end"
%             it_start = it;
%             it_end = it_start + this.N;
% 
%             % Change the end of the loop iterator if achieving the end of
%             % the folder files
%             if it_end > num_imgs
%                 it_end = num_imgs;
%                 l = 1;
%             end
% 
%             % Iterate over the sequence
%             for i = it_start:it_end
%                 % Read the left image
%                 left_name = fullfile(cam1_path, left_imgs(i).name);              
%                 left_img = imread(left_name);   
%                 % Reshape the image to [n, m, 1, 3]: 3 for RGB
%                 left_img = reshape(left_img, size(left_img,1), size(left_img,2), 1, 3);   
%                 % Concatenate the left_img to the tensor left
%                 left = cat(3, left, left_img);  
% 
%                 % Read right image
%                 right_name = fullfile(cam2_path, right_imgs(i).name); 
%                 right_img = imread(right_name);
%                 % Reshape the image to [n, m, 1, 3]: 3 for RGB
%                 right_img = reshape(right_img, size(right_img,1), size(left_img,2), 1, 3);
%                 % Concatenate the right_img to the tensor right
%                 right = cat(3, right, right_img);
% 
%                 % Set loop variable + consider the case of reaching the end
%                 if l ~=1 && i==it_end
%                     it = it_end +1;
%                     loop = l;
%                 elseif l == 1 && i==it_end
%                     it = 1;
%                     loop = l;
%                     l = 0;
%                     % l = 2
%                     % loop = l-2
%                 end
%             end
% 
%             % A truecolor (RGB) image sequence, specified as an M-by-N-by-3-by-K array.
%             % Change the tensor to fit implay requirement
%             %left_vis = reshape(left, size(right_img,1), size(left_img,2), 3, []);
%             % Play the sequence
%             %implay(left_vis);
%         end
%     end
% end



classdef ImageReader
  % Add class description here
  %
  %
    properties
        src = '';
        L = 0;
        R = 0;
        start = 0;
        N = 0;
    end
    
    methods
        % Constructor
        function ir = ImageReader(src, L, R, varargin)
      
            % Input parser
            
            % Standart values
            src_df = '/Users/hannes/ChokePoint_Dataset/P1E_S1';
            L_df = 1;
            R_df = 2;
            start_df = 0;
            N_df = 1;

            % Requirements
            src_val = @(x) exist(src, 'dir') == 7;  % Check if file path exists
            L_val = @(x) isnumeric(x) && (x >= 1) && (x <= 2);
            R_val = @(x) isnumeric(x) && (x >= 2) && (x <= 3);
            start_val = @(x) isnumeric(x) && (x >= 0);
            N_val = @(x) isnumeric(x) && (x >= 1);

            % Matlab parser function
            p = inputParser;
            addRequired(p, 'src');
            addRequired(p, 'L');
            addRequired(p, 'R');
            addOptional(p, 'start', start_df, start_val);
            addOptional(p, 'N', N_df, N_val);

            parse(p, src, L, R, varargin{:});
            
            ir.src = p.Results.src;
            ir.L = p.Results.L;
            ir.R = p.Results.R;
            ir.start = p.Results.start;
            ir.N = p.Results.N;
        end
        
        function loop = next(this)
            
            % persistent loop variable
            persistent l;
               
            
            path_splits = regexp(this.src, filesep, 'split');
            folder = char(path_splits(end));    % Scene folder
            
            left_folder = [folder, '_C', num2str(this.L)];    % Camera folder inside scene folder
            right_folder = [folder, '_C', num2str(this.R)];
            
            left_path = fullfile(this.src, left_folder);       % Path of scene folder + specific camera folder
            right_path = fullfile(this.src, right_folder);
            
            left_image_names = dir([left_path '/*.jpg']);          % Image names
            right_image_names = dir([left_path '/*.jpg']);
            
            % Tensors with the images
            left = [];
            right = [];
            
            loop_start = 1 + this.start
            loop_end = 1 + this.start + this.N
            img_num = length(left_image_names)
            
            % Start at the beginning of the function if the loop variable was set to 1 in the last call
            if l == 1
                loop_start = 1
                loop_end = loop_start + this.N
            end
            
            % Set loop variable if there are not enough images
            if loop_end >= img_num
                loop_end = img_num;
                l = 1;
            end
           
            % Read images
            for k = loop_start : loop_end
                left_name = fullfile(left_path, left_image_names(k).name)  % Full path of an image                
                left_img = imread(left_name);
                left_img = reshape(left_img, size(left_img,1), size(left_img,2), 1, 3);   % Change dimensions
                left = cat(3, left, left_img);                  % Create tensor with mutiple images (600 × 800 × (N + 1) · 3)
                
                right_name = fullfile(right_path, right_image_names(k).name);  % Full path of an image
                right_img = imread(right_name);
                right_img = reshape(right_img, size(right_img,1), size(left_img,2), 1, 3);
                right = cat(3, right, right_img);
            end
            
            loop = l;
            
            % figure;
            % image(left(:,:,1,1));
            size(left) 
            

        end
        
    end

end